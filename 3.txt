1. compile and install
	a tip
		every time you recompile it, change something in the source it self, so that you can easy tell whether the newest version is running
			e.g. modify the default index page
	
	prerequisites
		# groupadd -r nginx
		# useradd -r nginx -g nginx

	you can write a script to configure
		export BUILD_DIR=/{path of the source dir}
		export NGINX_DIR=/etc/nginx
		export SBIN_DIR=/usr/sbin
		export PID_DIR=/var/run
		export LOCK_DIR=/var/run
		export LOG_DIR=/var/log/nginx
		export RUN_DIR=/var/run
		export CACHE_DIR=/var/cache

		cd ${BUILD_DIR}
		./configure \
			--prefix=${NGINX_DIR} \
			--user=nginx \
			--group=nginx \
			--sbin-path=${SBIN_PATH}/nginx \
			--conf-path=${NGINX_DIR}/nginx.conf \
			--pid-path=${PID_DIR}/nginx.pid \
			--lock-path=${LOCK_DIR}/nginx.lock \
			--error-log-path=${LOG_DIR}/error.log \
			--http-log-path=${LOG_DIR}/access.log \
			--http-client-body-temp-path=${CACHE_DIR}/client_body_temp \
			--http-fastcgi-temp-path=${CACHE_DIR}/fastcgi_temp \
			--with-http_gzip_static_module \
			--with-http_stub_status_module \
			--with-http_ssl_module \
			--with-pcre \
			--with-file-aio \
			--with-http_realip_module \
			--without-http_scgi_module \
			--without-http_uwsgi_module \
			--without-http_proxy_module \
	
	go
		# chmod u+x scripted
		# ./scripted
		# make
		# make install
	
	if you fail
		use journalctl to check the journal
	
2. enable Nginx service on reboot
	# sudo wget -O /etc/init.d/nginx https://gist.githubusercontent.com/sairam/5892520/raw/b8195a71e944d46271c8a49f2717f70bcd04bf1a/etc-init.d-nginx
	# sudo chmod +x /etc/init.d/nginx
	# chkconfig --add nginx
	# chkconfig --level 345 nginx on

3. firewall configuration (on CentOS)
	# firewall-cmd --permanent --add-port=80/tcp
	# firewall-cmd --reload

4. Amazon Elastic Compute Cloud (EC2)
	http://aws.amazon.com/free
	you can host a t2.micro server free for one year
	access via ssh

5. Nginx core directives (nginx.conf)
	available context
		main, events, http, server, location, upstream, if, stream, mail, etc

	default
		# the whole body could be referred to as the main context

		user nginx;		# user <user_name> <group_name>
		worker_processes 1;	
			# default is 1, can be set to 'auto' to ask Nginx to detect the number of cores

		error_log /var/log/nginx/error.log warn;
			# error_log directive can be applied in multiple contexts like main, http, mail, stream, server, and location
			# info, notice, warn, error, crit, alert, emerg
			# setting the level to info is not recommended in production. use warn or error

		pid /var/run/nginx.pid;
			# where to log the pid of the master process

		events {	# events context, can only be declared once in the main context
			worker_connections 1024;	# the defualt usually suffice
			multi_accept on;		
				# by default, off, meaning a worker process will accept one new connection at a time
				# it's a good idea to turn it on
		}

		http {		# the heart of the configuration system for an Nginx web server
			include /etc/nginx/mime.types;
				# mime types describe the media type of content, guiding the browser to render the content appropriately, instead of simply downloading the file

			default_type application/octet-stream;
				# the default MIME type if nginx fails to find one in mime.types

			log_format main '$remote_addr - $remote_user [$time_local] "$request" '
				'$status $body_bytes_sent "$http_referer" '
				'"$http_user_agent" "$http_x_forwarded_for"';

			access_log /var/log/nginx/access.log main;	# main is the name of the log_format

			sendfile on;	# means that the call will not block on disk I/O
				# it's a good idea to turn it on

			#tcp_nopush on;
			keepalive_timeout 65;	# on a busy server, you can choose to reduce this timeout
			#gzip on;		# it's recommended to turn it on
			include /etc/nginx/conf.d/*.conf;
		}

